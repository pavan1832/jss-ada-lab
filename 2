#include<stdio.h>
#include<stdlib.h>

int search(int * ar,int key,int n)
{
    int cnt=0;
    for(int i=0 ; i<n ; i++)
    {
        cnt++;
        if(ar[i]==key)
          {
            printf("Element found!! Position is %d\n",(i+1));
            return cnt;
          } 
    }
    printf("Element %d not found!!\n",key);
    return cnt;
}

void main()
{
    int key,i,av_cnt;
    FILE * fp1,* fp2,* fp3;

    fp1 = fopen("worst.txt","a");
    fp2 = fopen("best.txt","a");
    fp3 = fopen("average.txt","a");

    int * ar;
    for(int n=10; n<=100 ; n+=10)
    {
        ar = (int *)malloc(n*sizeof(int));
        for(int i=0 ; i<n ; i++)
            ar[i]=i;

       // WORST CASE
       ar[n-1]=-9999;
       key = ar[n-1];
       fprintf(fp1,"%d %d\n",n,search(ar,key,n));
    
       //BEST CASE
       key = ar[0];
       fprintf(fp2,"%d %d\n",n,search(ar,key,n));

       //AVERAGE CASE
       av_cnt=0;
       for(i=1 ; i<n-1 ; i++)
        {
            key=ar[i];
            av_cnt +=  search(ar,key,n);
        }   
        fprintf(fp3,"%d %f\n",n,((float)av_cnt/(n-2)));
        free(ar);
    }
    fclose(fp1);
    fclose(fp2);
    fclose(fp3);
    system("gnuplot>load command.txt"); 
}

set title 'LINEAR SEARCH'
set xrange[10:100]
set yrange[1:100]
set xlabel 'Input size (n)'
set ylabel 'Search time (t)'
set style data linespoints
plot 'worst.txt' title 'WORST CASE ANALYSIS','best.txt' title 'BEST CASE ANALYSIS','average.txt' title 'AVERAGE CASE ANALYSIS'
pause -1 'Press any key to continue'

#include<stdio.h>
#include<stdlib.h>

int binary_search(int *ar,int key,int low,int high)
{

       int cnt,mid = (low+high)/2;

       if( low>high )
          {
            printf("Element not found!!\n");
            return 1;
          }
       if(ar[mid]==key)
           {
            printf("Element found!! Position is %d\n",(mid+1));
            return 1;
           }
           
        if( key < ar[mid] )
           high = mid-1;
        if( key > ar[mid] )
           low = mid+1; 

     return (1+binary_search(ar,key,low,high));
}

void main()
{
   FILE *fp1,*fp2;
   fp1 = fopen("best_bs.txt","w");
   fp2 = fopen("worst_bs.txt","w");

   int *ar,key,i;

   for(int n=10; n<=200 ; n+=10)
   {
      ar = (int *)malloc(n*sizeof(int));
      for(i=0 ; i<n ; i++)
         ar[i] = i;

     //BEST CASE : Element in exactly in mid position
     key = ar[(n-1)/2];
     fprintf(fp1,"%d  %d\n",n,binary_search(ar,key,0,n-1));

     //WORST CASE : Element in first or last position 
     key = ar[n-1]; // or key = ar[1];
     fprintf(fp2,"%d  %d\n",n,binary_search(ar,key,0,n-1));

     free(ar);
   }
   fclose(fp1);
   fclose(fp2);
   system("gnuplot>load command_bs.txt");
}

set title 'BINARY SEARCH'
set xrange[0:100]
set yrange[0:10]
set xlabel 'Input Size(n)'
set ylabel 'Search Time(t)'
set style data linespoints
plot 'best_bs.txt' title 'Best Case Analysis','worst_bs.txt' title 'Worst Case Analysis'
pause -1 'Press any key to continue'
