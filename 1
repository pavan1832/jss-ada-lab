#include<stdio.h>
#include<stdlib.h>
#define x 10
#define y 100
float euclid(int m,int n)
{ int r;
float count=0;
while(n)
{
count++;
r=m%n;
m=n;
n=r;
}r
eturn count;
}
float consec(int m,int n)
{ int min;
float count=0;
min=m;
if(n<min) min=n;
while(1)
{
count++;
if(m%min==0)
{
count++;
if(n%min==0) break;
min-=1;
}
else min-=1;
}r
eturn count;
}
float modified(int m,int n)
{ int temp;
float count=0;
while(n>0)
{ if(n>m)
{t
emp=m;
m=n;
n=temp;
}
m=m-n;
count++;
}r
eturn count; //m is the GCD
}
void analysis(int ch)
{ int m,n,i,j,k;
float count,maxcount,mincount;
FILE *fp1,*fp2;
for(i=x;i<=y;i+=10)
{
maxcount=0;
mincount=10000;
for(j=2;j<=i;j++) //To generate data
{f
or(k=2;k<=i;k++)
{
count=0;
m=j;
n=k;
switch(ch)
{
case 1 : count=euclid(m,n); break;
case 2 : count=consec(m,n); break;
case 3 : count=modified(m,n); break;
}
//To find maximum basic operations among all combinations between 2 to n
if(count>maxcount) maxcount = count;
//To find minimum basic operations among all combinations between 2 to n
if(count<mincount) mincount = count;
}}
switch(ch)
{
case 1 : fp2=fopen("e_b.txt","a");
fp1=fopen("e_w.txt","a");
break;
case 2 : fp2=fopen("c_b.txt","a");
fp1=fopen("c_w.txt","a");
break;
case 3 : fp2=fopen("m_b.txt","a");
fp1=fopen("m_w.txt","a");
break;
}fprintf(fp2,"%d\t\t%.2f\n",i,mincount);
fclose(fp2);
fprintf(fp1,"%d\t\t%.2f\n",i,maxcount);
fclose(fp1);
}}
void main()
{
analysis(1);
analysis(2);
analysis(3);
system("gnuplot>load 'gcd_plot.txt' ");
}

set title 'GCD Plot'
set xrange [0:100]
set yrange [0:150]
set xlabel 'Input'
set ylabel 'Count'
set style data linespoints
plot 'e_b.txt' u 1:2 w lp,'e_w.txt' u 1:2 w lp,'c_b.txt' u 1:2 w lp,'c_w.txt' u 1:2 w
lp,'m_b.txt' u 1:2 w lp,'m_w.txt' u 1:2 w lp
